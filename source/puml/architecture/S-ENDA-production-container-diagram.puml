@startuml S-ENDA-production-container-diagram
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_TOP_DOWN()

Person(dataprovider, "Dataset Producer")

Boundary(systems, "S-ENDA") {
  System(dmservice, "Metadata Services", "Defines a REST API to add events to an event queue, which subsequently triggers subscriber actions. The API requires input metadata on a required format, and provides metadata validators (e.g., for MMD). Also contains various storage and search solutions for discovery metadata. The Metadata Publisher defines a REST API to add events to the event queue, which subsequently triggers subscriber actions. The API requires input metadata on a required format, e.g., MMD, and creates a CloudEvent with the metadata as payload. The CloudEvent is posted in an event queue. The metadata publisher also provides metadata validators. Event queue with events containing metadata relevant for the subscribers. Maintains history for allowing temporarily failing subscribers to catch up.")

  System(dist_systems, "Data Distribution Services", "Primarily thredds/OPeNDAP.")
  System(vis_systems, "Data Visualization Services", "Server side configurations for WMS, etc.")
  System(monitoring, "Monitoring", "Monitoring of usage statistics, metadata consistency, and status of services and production chains.")

  System_Boundary(productionhub, "Production", "Automated system for data production. ECFlow, PPI, SMS, etc."){
    'Container(listen_update, "Update listener", "", "Listens for metadata updates, updates metadata in datafiles on behalf of authenticated user.")
    'Container(listen_delete, "Deletion listener", "", "Listens for metadata, and deletes files on behalf of authenticated user.")
    Container(listen_start, "ECFlow Agent", "Agent", "Listens for relevant events, and acts.")
    Container(job, "Production job", "ECFlow", "Production script.")
    Rel(listen_start, job, "Start job")
  }
}

'Boundary(consumers, "Data Consumers"){
'  Person(advanced, "Advanced")
'  Person(intermediate, "Intermediate")
'  Person(simple, "Simple")
'  System_Ext(portals, "Portals", "External portals harvest metadata on various standards")
'  System_Ext(apps, "Web/mobile apps", "External apps present data in customized ways.")
'}
'
'Rel(consumers, systems, "Search/Harvest", "CSW/OpenSearch/OAI-PMH")
'Rel(consumers, systems, "Visualize", "e.g., WMS")
'Rel(consumers, systems, "Stream", "OPeNDAP")
'
'Rel(simple, portals, "Search portals", "Web-UI/API")
'Rel(simple, apps, "Navigates to app", "Web/mobile UI")
'Rel(intermediate, portals, "Search portals", "Web-UI/API")
'Rel(advanced, portals, "Search portals", "Web-UI/API")

'Rel(listen_update, dmservice, "Listen update")
'Rel(listen_delete, dmservice, "Listen delete")
Rel(listen_start, dmservice, "Listen")

Rel(dataprovider, job, "Set up data production system")
Rel(dataprovider, listen_start, "Set up data production system")
Rel(job, vis_systems, "Store/Configure")
Rel(job, dist_systems, "Store")
Rel(job, dmservice, "Create/Update/Delete", "HTTP POST")

Rel(monitoring, job, "Monitor")

SHOW_LEGEND()

@enduml
