@startuml S-ENDA-metadata-service-container-diagram
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_TOP_DOWN()

Boundary(providers, "Providers") {
    Person(dataprovider, "Dataset Producer")
}

Boundary(systems, "S-ENDA") {
  System(productionhub, "Production", "Automated system for data production. ECFlow, PPI, SMS, etc.")
  System(dist_systems, "Data Distribution", "Primarily thredds/OPeNDAP.")
  System(vis_systems, "Data Visualization Services", "Server side configurations for WMS, etc.")
  System(monitoring, "Monitoring", "Monitoring of usage statistics, metadata consistency, and status of services and production chains.")
  System_Boundary(mserviceSystem, "Discovery Metadata Service") {
    Container(dmci, "Metadata Publisher", "Python/Flask", "Defines a REST API to add events to the event queue, which subsequently triggers subscriber actions. The API requires input metadata on a required format, e.g., MMD, and creates a CloudEvent with the metadata as payload. The CloudEvent is posted in an event queue. The metadata publisher also provides metadata validators.")

    Container(queue, "Event queue", "NATS/Kafka/..", "Event queue with events containing metadata relevant for the subscribers. Maintains history for allowing temporarily failing subscribers to catch up.")

    Rel(dmci, queue, "Publish", "CloudEvent")

    System_Boundary(backup, "Backup") {
      Container(metadata_store, "Backup Agent", "Agent", "Subscribes and listens for events of MMD create/update/delete, and writes to file storage.")
      SystemDb(file, "File", "Backup Dataset Discovery Metadata Store. Committed to git on regular intervals.")
    }

    Rel(metadata_store, file, "Write")
    Rel(metadata_store, queue, "Subscribe and listen", "CloudEvent w/MMD")

    System_Boundary(solrsyst, "SOLR") {
      Container(solr_agent, "SOLR Agent", "Agent", "Subscribes and listens for events of MMD create/update/delete, and ingests in SOLR database.")
      SystemDb(solr, "SOLR", "Dataset Discovery Metadata Store.")
    }

    Rel(solr_agent, solr, "Ingest")
    Rel(solr_agent, queue, "Subscribe and listen", "CloudEvent w/MMD")

    System_Boundary(csw, "CSW") {
      Container(csw_agent, "CSW Agent", "Agent", "Subscribes and listens for events of MMD create/update/delete, converts to Norwegian INSPIRE profile, and ingests in pycsw. Can be removed when SOLR becomes the db backend for pycsw.")
      Container(csapi, "pycsw", "CSW", "CSW endpoint for search and harvesting. Serves INSPIRE, DIF, etc., compliant metadata.")
      SystemDb(postgis, "PostGIS", "Dataset Discovery Metadata Store. Can be removed when SOLR becomes the db backend for pycsw.")
    }

    Rel(csw_agent, csapi, "Create/Update/Delete", "Rest API")
    Rel(csw_agent, queue, "Subscribe and listen", "CloudEvent w/MMD")
    Rel(csapi, postgis, "Create/Update/Delete")

    Rel(productionhub, dmci, "Validate/Create/Update/Delete", "xml")

    'Container(web_app, "Web Application", "HTML", "<b>Optional.</b> Provides functionality to register dataset and service metadata, display dataset and service usage statistics, production status, and monitor metadata to display errors and warnings (e.g., about dead links).")

  }
}

System(consumers, "Data Consumers")

Rel(dataprovider, productionhub, "Sets up data production")

Rel(consumers, csapi, "Harvest/Search", "CSW")
Rel(consumers, solr, "Use", "drupal")

'Rel(productionhub, dist_systems, "Store", "ACDD compliant netCDF-CF files")
'Rel(dataprovider, web_app, "Check dataset statistics and metadata consistency/status.")

SHOW_LEGEND()

@enduml
