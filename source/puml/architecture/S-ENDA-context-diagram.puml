@startuml S-ENDA-C4-context-diagram
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_TOP_DOWN()

Person(dataproducer, "Dataset Producer")
Person(consumers, "Data Consumer", "A data consumer can be a human (advanced, intermediate or simple users) or a machine (e.g., a mobile app or a data portal). Simple and intermediate users search, inspect, and access data via an external interface (e.g., a mobile app or data portal). Advanced users acess the search, visualization, and distribution services directly. Open licenses and well documented data following international standards enable Interoperability and Reusability.")

'Boundary(consumers, "Data Consumers"){
'  Person(advanced, "Advanced")
'  Person(intermediate, "Intermediate")
'  Person(simple, "Simple")
'
'  System_Ext(extportals, "Portals", "External portals harvest metadata on various standards, and present data in customized ways. Can also prepare data delivery (e.g., with basket solution).")
'  System_Ext(apps, "Web/mobile apps", "External apps present data in customized ways.")
'
'  Rel(advanced, extportals, "Search portals", "Web-UI/API")
'  Rel(intermediate, extportals, "Search portals", "Web-UI/API")
'  Rel(simple, apps, "Navigates to app", "Web/mobile UI")
'}
'Boundary(providers, "Providers") {
'    Person(dataproducer, "Dataset Producer")
'    Person(datacurator, "Data curator")
'    Person(serviceprovider, "Service Provider")
'}

System(dmservice, "Metadata Services", "Defines a REST API to add events to an event queue, which subsequently triggers subscriber actions. The API requires input metadata on a required format, and provides metadata validators (e.g., for MMD). Also contains various storage and search solutions for discovery metadata. The event queue maintains history for allowing temporarily failing subscribers to catch up.")
System(productionhub, "Production", "Automated system for data production. ECFlow, PPI, SMS, etc.")
System(dist_systems, "Data Distribution Services", "Primarily thredds/OPeNDAP.")
System(vis_systems, "Data Visualization Services", "WMS, etc.")
System(monitoring, "Monitoring", "Monitoring of usage, metadata consistency, and status of services and production chains. Uses existing systems (e.g., prometheus/grafana).")
SystemDb(lustre, "Data storage", "Lustre file system.")

Rel_U(consumers, dist_systems, "Access data")
Rel_U(consumers, dmservice, "Find data", "CSW/OpenSearch")
Rel_U(consumers, vis_systems, "Visualize data")
'Rel_U(advanced, dist_systems, "Stream data")
'Rel_U(advanced, dmservice, "Search", "CSW/OpenSearch")
'Rel_U(advanced, vis_systems, "Visualize data")
'Rel_U(extportals, dmservice, "Harvest metadata", "CSW")
'Rel_U(apps, dmservice, "Harvest metadata", "CSW/OpenSearch")
'Rel_U(apps, vis_systems, "Visualize data")
'Rel_U(extportals, vis_systems, "Visualize data")
'Rel_U(extportals, dist_systems, "Stream data")


'Rel(providers, dmservice, "Register metadata")
Rel(dataproducer, monitoring, "Check status")

Rel(dataproducer, productionhub, "Set up data production system")
Rel_L(productionhub, lustre, "Store")
Rel_L(dist_systems, lustre, "Access")
Rel(productionhub, dmservice, "Validate/create/update/delete", "HTTP POST")
Rel(productionhub, dmservice, "Listen", "CloudEvent")
Rel_L(vis_systems, lustre, "Access")

SHOW_LEGEND()

@enduml
